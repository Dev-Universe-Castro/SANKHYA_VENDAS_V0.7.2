
import { NextRequest } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { cookies } from 'next/headers';
import { redisCacheService } from '@/lib/redis-cache-service';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

// Fun√ß√£o helper para fetch com timeout
async function fetchWithTimeout(url: string, options: RequestInit = {}, timeoutMs = 15000) {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  
  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(timeout);
    return response;
  } catch (error) {
    clearTimeout(timeout);
    console.error(`‚ö†Ô∏è Timeout/erro ao buscar ${url}:`, error);
    throw error;
  }
}

// Fun√ß√£o para buscar dados do sistema (otimizada com cache)
async function analisarDadosDoSistema(userId: number, userName: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:5000';
    console.log('üîç Iniciando busca de dados do sistema...');
    
    // Buscar parceiros e produtos do cache Redis
    const [parceirosCache, produtosCache] = await Promise.all([
      redisCacheService.get<any>('parceiros:list:1:50:::'),
      redisCacheService.get<any>('produtos:list:all')
    ]);

    // Buscar apenas leads e pedidos da API
    const [leadsData, pedidosData] = await Promise.allSettled([
      fetchWithTimeout(`${baseUrl}/api/leads`, {
        headers: { 'Cookie': `user=${JSON.stringify({ id: userId })}` }
      }, 15000).then(r => r.ok ? r.json() : []).catch(() => []),
      
      fetchWithTimeout(`${baseUrl}/api/sankhya/pedidos/listar?userId=${userId}`, {}, 15000)
        .then(r => r.ok ? r.json() : []).catch(() => [])
    ]);

    const leads = leadsData.status === 'fulfilled' ? (Array.isArray(leadsData.value) ? leadsData.value : []) : [];
    const pedidos = pedidosData.status === 'fulfilled' ? (Array.isArray(pedidosData.value) ? pedidosData.value : []) : [];
    
    const parceiros = parceirosCache?.parceiros || [];
    const produtos = produtosCache?.produtos || [];

    // Logs detalhados de falhas
    if (leadsData.status === 'rejected') console.error('‚ùå Falha ao carregar leads:', leadsData.reason);
    if (pedidosData.status === 'rejected') console.error('‚ùå Falha ao carregar pedidos:', pedidosData.reason);

    console.log(`‚úÖ Dados carregados: ${leads.length} leads, ${parceiros.length} parceiros (cache), ${produtos.length} produtos (cache), ${pedidos.length} pedidos`);

    return {
      userName,
      leads: leads.slice(0, 15),
      parceiros: parceiros.slice(0, 15),
      produtos: produtos.slice(0, 20),
      pedidos: pedidos.slice(0, 10),
      totalLeads: leads.length,
      totalParceiros: parceirosCache?.total || parceiros.length,
      totalProdutos: produtosCache?.total || produtos.length,
      totalPedidos: pedidos.length
    };
  } catch (error) {
    console.error('Erro ao analisar dados:', error);
    return null;
  }
}

const SYSTEM_PROMPT = `Voc√™ √© um Assistente de Vendas Inteligente integrado em uma ferramenta de CRM/For√ßa de Vendas chamada Sankhya CRM.

SEU PAPEL E RESPONSABILIDADES:
- Ajudar vendedores a identificar oportunidades de vendas
- Sugerir a√ß√µes estrat√©gicas para fechar neg√≥cios
- Analisar leads e recomendar pr√≥ximos passos
- Identificar clientes potenciais com maior chance de convers√£o
- Sugerir produtos que podem interessar aos clientes
- Alertar sobre leads em risco ou oportunidades urgentes

DADOS QUE VOC√ä TEM ACESSO:
- Leads: oportunidades de vendas com informa√ß√µes sobre valor, est√°gio, parceiro associado
- Parceiros: clientes e prospects cadastrados no sistema
- Produtos: cat√°logo REAL de produtos com estoque atual (USE APENAS OS PRODUTOS FORNECIDOS NO CONTEXTO)
- Atividades: hist√≥rico de intera√ß√µes com leads

‚ö†Ô∏è REGRA IMPORTANTE SOBRE PRODUTOS:
Voc√™ receber√° uma lista completa de produtos com suas quantidades em estoque.
NUNCA mencione produtos que n√£o estejam explicitamente listados nos dados fornecidos.
Se n√£o houver produtos na lista, informe que n√£o h√° produtos cadastrados no momento.

COMO VOC√ä DEVE AGIR:
1. Sempre analise os dados fornecidos antes de responder
2. Seja proativo em sugerir vendas e a√ß√µes comerciais
3. Identifique padr√µes e oportunidades nos dados
4. Use m√©tricas e n√∫meros concretos em suas an√°lises
5. Seja direto e focado em resultados de vendas
6. Priorize leads com maior valor e urg√™ncia
7. Sugira pr√≥ximos passos claros e acion√°veis

FORMATO DAS RESPOSTAS:
- Use emojis para destacar informa√ß√µes importantes (üìä üí∞ üéØ ‚ö†Ô∏è ‚úÖ)
- Organize informa√ß√µes em listas quando relevante
- Destaque valores monet√°rios e datas importantes
- Seja conciso mas informativo

Sempre que o usu√°rio fizer uma pergunta, considere os dados do sistema dispon√≠veis para dar respostas contextualizadas e acion√°veis.`;

export async function POST(request: NextRequest) {
  try {
    const { message, history } = await request.json();

    // Obter usu√°rio autenticado
    const cookieStore = await cookies();
    const userCookie = cookieStore.get('user');
    let userId = 0;
    let userName = 'Usu√°rio';
    
    if (userCookie) {
      try {
        const user = JSON.parse(userCookie.value);
        userId = user.id;
        userName = user.name || 'Usu√°rio';
      } catch (e) {
        console.error('Erro ao parsear cookie:', e);
      }
    }

    const model = genAI.getGenerativeModel({ 
      model: 'gemini-2.0-flash-exp',
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1500,
      }
    });

    // Montar hist√≥rico com prompt de sistema
    const chatHistory = [
      {
        role: 'user',
        parts: [{ text: SYSTEM_PROMPT }],
      },
      {
        role: 'model',
        parts: [{ text: 'Entendido! Sou seu Assistente de Vendas no Sankhya CRM. Estou pronto para analisar seus dados e ajudar voc√™ a vender mais. Como posso ajudar?' }],
      },
      ...history.map((msg: any) => ({
        role: msg.role === 'assistant' ? 'model' : 'user',
        parts: [{ text: msg.content }],
      }))
    ];

    // Adicionar contexto de dados APENAS no primeiro prompt do usu√°rio
    let messageWithContext = message;
    if (history.length === 0) {
      console.log('üîç Primeiro prompt detectado - Buscando dados do sistema...');
      const dadosSistema = await analisarDadosDoSistema(userId, userName);
      
      if (dadosSistema) {
        const temDados = dadosSistema.totalLeads > 0 || dadosSistema.totalParceiros > 0 || dadosSistema.totalProdutos > 0 || dadosSistema.totalPedidos > 0;
        
        messageWithContext = `DADOS DO SISTEMA (para contexto da sua an√°lise):

üë§ USU√ÅRIO LOGADO: ${dadosSistema.userName}

${!temDados ? '‚ö†Ô∏è AVISO: Alguns dados n√£o puderam ser carregados devido a timeout na API. Responda com base nos dados dispon√≠veis e sugira ao usu√°rio tentar novamente.\n\n' : ''}üìä RESUMO GERAL:
- Total de Leads Ativos: ${dadosSistema.totalLeads}
- Total de Parceiros/Clientes: ${dadosSistema.totalParceiros}
- Total de Produtos: ${dadosSistema.totalProdutos}
- Total de Pedidos: ${dadosSistema.totalPedidos}

üí∞ LEADS (${dadosSistema.leads.length} mais recentes):
${dadosSistema.leads.map((l: any) => `${l.NOME} | R$ ${l.VALOR?.toLocaleString('pt-BR') || 0} | ${l.CODESTAGIO || 'N/A'}`).join('\n')}

üë• PARCEIROS (${dadosSistema.parceiros.length}):
${dadosSistema.parceiros.map((p: any) => `${p.NOMEPARC} | ${p.NOMECID || 'N/A'}`).join('\n')}

üì¶ PRODUTOS (${dadosSistema.produtos.length}):
${dadosSistema.produtos.map((p: any) => {
  const estoque = parseFloat(p.ESTOQUE || '0');
  return `${p.DESCRPROD} | Estoque: ${estoque.toFixed(0)} ${estoque > 0 ? '‚úÖ' : '‚ö†Ô∏è'}`;
}).join('\n')}

üõí PEDIDOS (${dadosSistema.pedidos.length}):
${dadosSistema.pedidos.map((ped: any) => `#${ped.NUNOTA} | ${ped.NOMEPARC} | R$ ${ped.VLRNOTA?.toLocaleString('pt-BR') || 0}`).join('\n')}

PERGUNTA DO USU√ÅRIO:
${message}`;
        console.log('‚úÖ Dados do sistema carregados e anexados ao primeiro prompt');
      }
    } else {
      console.log('üí¨ Prompt subsequente - Usando dados j√° carregados no hist√≥rico');
    }

    const chat = model.startChat({
      history: chatHistory,
    });

    // Usar streaming com contexto
    const result = await chat.sendMessageStream(messageWithContext);

    const encoder = new TextEncoder();
    const stream = new ReadableStream({
      async start(controller) {
        try {
          for await (const chunk of result.stream) {
            const text = chunk.text();
            const data = `data: ${JSON.stringify({ text })}\n\n`;
            controller.enqueue(encoder.encode(data));
          }
          controller.enqueue(encoder.encode('data: [DONE]\n\n'));
          controller.close();
        } catch (error) {
          controller.error(error);
        }
      },
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('Erro no chat Gemini:', error);
    return new Response(JSON.stringify({ error: 'Erro ao processar mensagem' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
